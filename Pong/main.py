# 1) Отрисовка объектов на экране
# Для более организованного размещения различных объектов стоит понимать,
# что существует основной дисплей на котором можно, что-то отрисовать с помощью метода draw(surface,color,rect).

# И обычная поверхность, можно представить ее как дополнительный слой поверх экрана, для отображения чего-либо,
# разница между дисплеем и доп поверхностью в том, что доп поверхностей может быть сколько угодно,
# однако их необходимо прикреплять к основной поверхности дисплея, иначе они не будут отображаться.
# По функционалу они идентичны с самим дисплеем, можно размещать картинки, фигуры и т.д.

# Также существует элемент прямоугольник, и он буквально является прямоугольником. Его можно поместить вокруг
# каких либо фигур, или поверхностей, что делает в разы проще их изменения или перемещение в будущем. Класс Rect

# Также стоит понимать, что нулевые координаты Х и Y нашего экрана располагаются в верхнем левом углу экрана

# 5) Способы создания цветов
# Самый популярный это кортеж из 3-х значений (r,g,b) r - красный, g - зеленый, b - синий
# с помощью этих цветов можно создать любой существующий цвет, диапазон цифр, что можно передать на 1 цвет 0 до 255,
# где 0 отсутствие цвета и 255 чистый цвет, чтобы получить красный (255,0,0), черный (0,0,0), белый (255,255,255)

# Второй способ создание цветов это использование цветового объекта с помощью команды pygame.color('name')
# и можно передать строчное название цвета можно найти все доступные имена цветов в интернете

import pygame, sys

pygame.init()
clock = pygame.time.Clock()

screen_width = 1280
screen_height = 960


screen = pygame.display.set_mode((screen_width, screen_height))
pygame.display.set_caption('Pong')

# 2) Создание объекта мяча, размещение его по центру экрана
# screen_width / 2 - 15, screen_height / 2 - 15
# Берем половину экрана и вычитаем половину от размера мяча
# 30, 30 - размеры самого мяча, ширина и высота в пикселях.

# Принимает аргументы местоположения мяча на экране (X, Y) и его размеры в пикселях (ширина и высота)
ball = pygame.Rect(screen_width / 2 - 15, screen_height / 2 - 15, 30, 30)

# 3) Создание объекта игрока
# screen_width-20, screen_height/2-70
# Размещаем игрока в верхнем левом углу экрана
# 10, 140 - размеры игрока, ширина и высота в пикселях
player = pygame.Rect(screen_width - 20, screen_height / 2 - 70, 10, 140)

# Создание объекта оппонента
opponent = pygame.Rect(10, screen_height / 2 - 70, 10, 140)

# 4) На текущем этапе это просто пустые прямоугольники и на экране их не видно,
# чтобы на самом деле их отрисовать нам нужен цикл и метод pygame.draw(surface,color,rect)
# что представляет собой модуль со всеми различными вариантами рисования фигур
# surface - поверхность на которой необходимо разместить нарисованное в нашем случае переменная screen
# rect - объект, что нам необходимо отрисовать в нашем случае переменные ball, player, opponent
# color - и цвета, есть 2 способа создания цветов в pygame, об этом в начале файла, пункт 5

# 6) Создание цвета 2-мя выше описанными путями
bg_color = pygame.Color('gray12')  # Темно серый для заднего фона
light_gray = (200, 200, 200)  # Cветло серый для шара и игроков

while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()

    # 10) Важно понимать порядок отрисовки объектов на экране
    # Первым всегда рисуется задний фон
    # Потом препятствия и не двигающиеся объекты (препятствия, стены)
    # И в последнюю очередь, то, что на экране должно передвигаться (игроки, лут, враги)
    #
    # Когда все выше пронумерованное выполнено можно наконец приступать к анимации

    # 8) Заполнение игрового дисплея цветом заднего фона,
    # Необходимо, для того чтобы очистить экран от рисунков предыдущего кадра.
    # Передаем переменную, в которой создали цвет заднего фона
    screen.fill(bg_color)

    # 9) Отрисовка центральной линии, разделяющей экран на 2 половины.
    # Метод draw.aaline(screen, color, (X,Y), (X2,Y2))
    # Принимает аргументы экрана, цвета и 2-х точек отрисовки линии, точка начала и конца
    # (screen_width / 2, 0) - X = половина экрана, Y = 0 отступ от верхней части экрана
    # (screen_width / 2, screen_height) X = половина экрана, Y = самая нижняя точка экрана
    pygame.draw.aaline(screen, light_gray, (screen_width / 2, 0), (screen_width / 2, screen_height))


    # 7) Отрисовка 2-х игроков и мяча
    # Вызов функции отрисовки с передачей аргументов
    # Так как игроки прямоугольной формы используем .rect()
    pygame.draw.rect(screen, light_gray, player)
    pygame.draw.rect(screen, light_gray, opponent)

    # Однако шар круглый, для этого вызываем .ellipse()
    pygame.draw.ellipse(screen, light_gray, ball)

    pygame.display.flip()
    clock.tick(60)
